import fs from "fs";
import path from "path";
import { fileURLToPath } from "url";
import mongoose from "mongoose";
import dotenv from "dotenv";

// ESM equivalent of __dirname
const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);

// Charger les variables d'environnement
dotenv.config({ path: path.join(__dirname, "..", ".env") });

const MONGODB_URI = process.env.MONGODB_URI_ADMIN;
const ASSETS_DIR = path.join(__dirname, "..", "public", "assets");
const BACKUP_DIR = path.join(ASSETS_DIR, `_migration_backup_${Date.now()}`);

// Film Schema avec img
const filmSchema = new mongoose.Schema({
  title: { type: String, required: true },
  duration: { type: String, required: true },
  year: { type: Number, required: true },
  genre: { type: String, required: true },
  description: { type: String, required: true },
  videoUrl: { type: String, required: true },
  director: { type: String, default: "" },
  createdAt: { type: Date, default: Date.now },
  ephemere: { type: Boolean, default: false },
  img: { type: Buffer },
});

const Film = mongoose.model("Film", filmSchema);

// Fonction de connexion √† MongoDB
const connectDB = async () => {
  try {
    await mongoose.connect(MONGODB_URI, {
      maxPoolSize: 5,
      serverSelectionTimeoutMS: 10000,
      socketTimeoutMS: 45000,
      bufferCommands: false,
    });
    console.log("‚úÖ [MIGRATION] MongoDB connect√© (ADMIN access)");
  } catch (error) {
    console.error("‚ùå [MIGRATION] Erreur connexion MongoDB:", error.message);
    throw error;
  }
};

// Fonction principale de migration
const migrateImages = async () => {
  console.log("üöÄ [MIGRATION] D√©but de la migration des images vers MongoDB");

  // V√©rifier les dossiers
  if (!fs.existsSync(ASSETS_DIR)) {
    console.error(`‚ùå [MIGRATION] Dossier ${ASSETS_DIR} introuvable`);
    return;
  }

  // Cr√©er le dossier de backup
  if (!fs.existsSync(BACKUP_DIR)) {
    fs.mkdirSync(BACKUP_DIR, { recursive: true });
    console.log(`üíæ [MIGRATION] Dossier de backup cr√©√©: ${BACKUP_DIR}`);
  }

  try {
    await connectDB();

    // R√©cup√©rer tous les films
    const films = await Film.find({}).sort({ createdAt: 1 });
    console.log(`üìä [MIGRATION] ${films.length} films trouv√©s en base`);

    let migratedCount = 0;
    let skippedCount = 0;
    let errorCount = 0;

    for (let i = 0; i < films.length; i++) {
      const film = films[i];
      const expectedImagePath = path.join(ASSETS_DIR, `film${i + 1}.webp`);

      try {
        // V√©rifier si le film a d√©j√† une image
        if (film.img && film.img.length > 0) {
          console.log(
            `‚è≠Ô∏è [MIGRATION] ${film.title} - Image d√©j√† pr√©sente (${film.img.length} bytes)`
          );
          skippedCount++;
          continue;
        }

        // V√©rifier si l'image existe
        if (!fs.existsSync(expectedImagePath)) {
          console.warn(
            `‚ö†Ô∏è [MIGRATION] ${film.title} - Image non trouv√©e: film${
              i + 1
            }.webp`
          );
          errorCount++;
          continue;
        }

        console.log(
          `üîÑ [MIGRATION] ${film.title} - Migration de film${i + 1}.webp`
        );

        // Lire l'image
        const imageBuffer = fs.readFileSync(expectedImagePath);
        console.log(
          `üì∏ [MIGRATION] ${film.title} - Image lue (${imageBuffer.length} bytes)`
        );

        // Backup de l'image
        const backupPath = path.join(BACKUP_DIR, `film${i + 1}.webp`);
        fs.copyFileSync(expectedImagePath, backupPath);

        // Mettre √† jour le film en base
        await Film.findByIdAndUpdate(film._id, {
          $set: { img: imageBuffer },
        });

        console.log(`‚úÖ [MIGRATION] ${film.title} - Image migr√©e avec succ√®s`);
        migratedCount++;
      } catch (error) {
        console.error(`‚ùå [MIGRATION] ${film.title} - Erreur:`, error.message);
        errorCount++;
      }
    }

    console.log("\nüìä [MIGRATION] R√©sum√© de la migration:");
    console.log(`‚úÖ Images migr√©es: ${migratedCount}`);
    console.log(`‚è≠Ô∏è Images ignor√©es (d√©j√† pr√©sentes): ${skippedCount}`);
    console.log(`‚ùå Erreurs: ${errorCount}`);
    console.log(`üíæ Backup disponible dans: ${BACKUP_DIR}`);

    if (migratedCount > 0) {
      console.log("\nüéâ [MIGRATION] Migration termin√©e avec succ√®s!");
      console.log(
        "üîÑ [MIGRATION] Red√©marrez votre application pour voir les changements"
      );
      console.log(
        "üìù [MIGRATION] Testez que toutes les images s'affichent correctement"
      );
      console.log(
        "üóëÔ∏è [MIGRATION] Une fois valid√©, vous pourrez supprimer les images statiques"
      );
    }
  } catch (error) {
    console.error("‚ùå [MIGRATION] Erreur g√©n√©rale:", error.message);
  } finally {
    await mongoose.disconnect();
    console.log("üîå [MIGRATION] D√©connexion MongoDB");
  }
};

// V√©rifier les param√®tres et lancer la migration
const checkEnvironment = () => {
  if (!MONGODB_URI) {
    console.error("‚ùå [MIGRATION] MONGODB_URI_ADMIN non d√©fini dans .env");
    process.exit(1);
  }

  console.log("üîß [MIGRATION] Configuration:");
  console.log(`üìÅ Dossier assets: ${ASSETS_DIR}`);
  console.log(`üíæ Dossier backup: ${BACKUP_DIR}`);
  console.log(`üîó MongoDB: ${MONGODB_URI.replace(/\/\/.*@/, "//***@")}`);
  console.log("");

  return true;
};

// Point d'entr√©e
if (checkEnvironment()) {
  migrateImages().catch((error) => {
    console.error("‚ùå [MIGRATION] Erreur fatale:", error);
    process.exit(1);
  });
}
